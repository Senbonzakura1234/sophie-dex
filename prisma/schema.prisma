// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum CATEGORY {
   ACCESSORY
   ARMOR
   ATK_ITEM
   BUFF_ITEM
   DE_BUFF_ITEM
   HEAL_ITEM
   WEAPON

   MATERIAL
   BOOK

   EXPLORATION
   MACHINE
   KEY_ITEM

   SYNTHESIS
}

enum COLOR {
   GREEN
   BLUE
   WHITE
   YELLOW
   RED
}

enum RECIPE_TYPE {
   BEGINNER_RECIPES
   GROWTH_RECIPES
   HOPE_RECIPES
   DREAM_RECIPES
   MYSTERY_RECIPES
}

enum RELATED_CATEGORY_ENUM {
   PLANT
   MEDICINE_MAT
   WATER
   IMPORTANT
   BOMB
   MEDICINE
   FOOD
   SWEETS
   CLOTH
   NEUTRALIZER
   WEAPON_MAT
   ARMOR_MAT
   WEAPON
   ARMOR
   ACCESSORY
   POISON_MAT
   SECRET_POWER
   FUEL
   THREAD
   WOOD
   ELIXIR
   ORE
   GUNPOWDER
   GEM
   METAL
   CLAY
   ANIMAL
   INGREDIENT
   PAPER
   MAGIC_ITEM
}

enum RUMOR_TYPE {
   MONSTER
   MATERIAL
}

enum SORT_BY {
   index
   name
   level
   price
}

enum SORT_DIRECTION {
   asc
   desc
}

enum TABLE {
   RUMOR
   ITEM
   TRAIT
   EFFECT
}

type HIGHLIGHT_TEXT {
   content String
}

type HYPER_LINK_RECORD {
   id    String @db.ObjectId
   name  String
   table TABLE
}

type HYPER_LINK_SEARCH {
   searchQuery SEARCH_QUERY
   table       TABLE
}

type HYPER_LINK_MAP {
   contentText      String[]
   linkRecordMap    HYPER_LINK_RECORD[]
   linkSearchMap    HYPER_LINK_SEARCH[]
   highlightTextMap HIGHLIGHT_TEXT[]
}

type ITEM_DESCRIPTION {
   hunt     String[]
   location String[]
   rumor    HYPER_LINK_RECORD?
   special  String?
   shop     String?
}

type MERGE_TRAIT {
   consist HYPER_LINK_RECORD[]
}

type RELATED_CATEGORY {
   name  RELATED_CATEGORY_ENUM
   count Int
}

type SEARCH_QUERY {
   search          String?
   sortBy          SORT_BY?
   direction       SORT_DIRECTION?
   relatedCategory RELATED_CATEGORY_ENUM?
   category        CATEGORY?
   color           COLOR?
   rumorType       RUMOR_TYPE?
   recipeType      RECIPE_TYPE?
   page            Int?
}

generator client {
   provider        = "prisma-client-js"
   previewFeatures = ["orderByNulls", "jsonProtocol"]
}

datasource db {
   provider = "mongodb"
   url      = env("DATABASE_URL")
}

model Effect {
   id          String @id @default(auto()) @map("_id") @db.ObjectId
   index       Int
   name        String
   description String
   keyWords    String
}

model Item {
   id                String             @id @default(auto()) @map("_id") @db.ObjectId
   index             Int
   name              String
   description       ITEM_DESCRIPTION
   color             COLOR
   relatedCategories RELATED_CATEGORY[]
   category          CATEGORY
   level             Int
   recipeType        RECIPE_TYPE?
   recipeIdea        HYPER_LINK_MAP?
   traitPresent      HYPER_LINK_RECORD?
   keyWords          String
}

model Rumor {
   id          String         @id @default(auto()) @map("_id") @db.ObjectId
   name        String
   description HYPER_LINK_MAP
   location    String
   price       Int
   rumorType   RUMOR_TYPE
   keyWords    String
}

model Trait {
   id          String             @id @default(auto()) @map("_id") @db.ObjectId
   index       Int
   name        String
   description String
   categories  CATEGORY[]
   mergeFrom   MERGE_TRAIT[]
   itemPresent HYPER_LINK_RECORD?
   keyWords    String
}
